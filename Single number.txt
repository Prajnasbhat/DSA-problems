Single number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.
Accepted
2.4M
Submissions
3.4M
Acceptance Rate
71.7%


def singleNumber(self, nums: List[int]) -> int:
        if len(nums)>0:
            d = {}
            i=1
            for n in nums:
                if n in d.keys():
                    d[n]=i+1
                else:
                    d[n]=1
                    i=1
            for k,v in d.items():
                if d[k]==1:
                    return k
        else:
            return -1

time complexity - O(n+n)
soace complexity -O(n)

def singleNumber(self, nums: List[int]) -> int:
        xorr = 0
        for each in nums:
            xorr ^=each
        return xorr

time complexity - O(n)
soace complexity -O(1)