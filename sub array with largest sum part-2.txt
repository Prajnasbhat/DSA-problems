Given an integer array arr, find the contiguous subarray (containing at least one number) which
has the largest sum and returns its sum and prints the subarray.

Example 1:

Input: arr = [-2,1,-3,4,-1,2,1,-5,4] 

Output: 6 

Explanation: [4,-1,2,1] has the largest sum = 6. 

Examples 2: 

Input: arr = [1] 

Output: 1 

Explanation: Array has only one element and which is giving positive sum of 1. 

This is best approach which follows Kadan's algorithm

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        final_sum=-99999
        current_sum=0
        i=0
        start=0
        ans_start=-1
        end=-1
        while i<len(nums):
            if current_sum==0:
                start=i
            current_sum+=nums[i]
            if current_sum>final_sum:
                final_sum=current_sum
                ans_start=start
                end=i
            if current_sum<0:
                current_sum=0
                
            i+=1
        return nums[ans_start:end+1]
        
Time complexity -O(n)
Space complexity-O(1)