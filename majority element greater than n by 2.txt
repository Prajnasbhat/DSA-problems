Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?


class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)/2
        s=dict()
        for each in nums:
            if each in s:
                s[each]+=1
            else:
                s[each]=1
        key = max(s,key=s.get)
        print(key)
        if s[key]>n:
            return key
        else:
            return -1

Time complexity- O(n)
space complexity -O(n)

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count=0
        n=len(nums)
        ele=None
        for i in range(n):
            if count==0:
                count+=1
                ele=nums[i]
            elif ele==nums[i]:
                count+=1
            else:
                count-=1
        ele_count=0
        for each in nums:
            if ele==each:
                ele_count+=1
        if ele_count>n/2:
            return ele
        else:
            return -1

Time complexity-O(n)
Space complexity - O(1)