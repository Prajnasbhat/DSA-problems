Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107


Solution 1:

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        count=0
        for i in range(0,len(nums)):
            sum=0
            for j in range(i,len(nums)):
                sum+=nums[j]
                if sum==k:
                    count+=1
            

        return count

Time complexity - O(n^2)
Space complexity -O(1)

from collections import defaultdict
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        mpp = defaultdict(int)
        preSum = 0
        cnt = 0

        mpp[0] = 1 # Setting 0 in the map.
        for i in range(len(nums)):
            # add current element to prefix Sum:
            preSum += nums[i]

            # Calculate x-k:
            remove = preSum - k

            # Add the number of subarrays to be removed:
            cnt += mpp[remove]

            # Update the count of prefix sum
            # in the map.
            mpp[preSum] += 1

        return cnt

Time complexity - O(n)
Space complexity -O(1)