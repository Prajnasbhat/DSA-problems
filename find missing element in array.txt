Problem Statement: Given an integer N and an array of size N-1 containing N-1 numbers between 1 to N. Find the number(between 1 to N), that is not present in the given array.

Examples
Example 1:
Input Format: N = 5, array[] = {1,2,4,5}
Result: 3
Explanation: In the given array, number 3 is missing. So, 3 is the answer.

Example 2:
Input Format: N = 3, array[] = {1,3}
Result: 2
Explanation: In the given array, number 2 is missing. So, 2 is the answer.

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        d = {}
        for i,n in enumerate(nums):
            d[i]=n
        for i in range(len(nums)+1):
            if i not in d.values():
                return i
            
        return -1

Time complexity -O(n)
Space complexity -O(n)

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        n=len(nums)
        sm = n*(n+1)//2
        sm_ele=0
        for i in range(len(nums)):
            sm_ele=sm_ele+nums[i]
        return sm-sm_ele

Time complexity -O(n)
Space complexity -O(1)